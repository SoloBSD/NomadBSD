#!/bin/sh
#
# COMMANDS
#
# all		Set up base system, build and install kernel if BUILD_KERNEL is
#			set to YES, intall packages, ports, software from Git repos,
#			create uzip image, and finally build the NomadBSD image.
#
# init		Create base system, add the nomad user, and copy the
#			configuration files to the base system.
#
# initbase	Create nomad user, and copy all configuration files from
#			config/ and nomad/ to base system.
#
# cleanup	Unmount filesystems, remove mount points, and detach md devices.
#
# uzip		Create uzip image.
#
# patch		Create a patch file for nomadbsd-update. Add a new record to the
#			patch index.
#
# image		Build the NomadBSD image.
#
# ports		Build and install all ports defined in build.cfg
#
# pkgs		Install all packages from pkg.list
#
# git		Install software from Git repos defined in build.cfg
#
# pkgcfg	Set up configuration files and users required by installed
#			software packages.
#
# resume	Continue where the build failed.
#
# usrcfg	Install all files from nomad/ in ${SYSDIR]/home/nomad
#
# usrclean	Remove all files from ${SYSDIR}/home/nomad
#
# clean		Remove base system dir, distfiles, patch dir, and uzip images.
#
# vim: set tabstop=4:
#
. ./build.cfg

if [ -z "${RELEASE}" ]; then
	echo "RELEASE must not be empty" >&2
	exit 1
fi
if [ -z "${SYSDIR}" ]; then
	echo "SYSDIR must not be empty" >&2
	exit 1
fi
if [ -z "${DISTDIR}" ]; then
	echo "DISTDIR must not be empty" >&2
	exit 1
fi
if [ -z "${PATCHDIR}" ]; then
	echo "PATCHDIR must not be empty" >&2
	exit 1
fi

if [ "$(realpath -q ${SYSDIR})" = "/" ]; then
	echo "Refusing to use '/' as SYSDIR"
	exit 1
fi
if [ "$(realpath -q ${DISTDIR})" = "/" ]; then
	echo "Refusing to use '/' as DISTDIR"
	exit 1
fi
if [ "$(realpath -q ${PATCHDIR})" = "/" ]; then
	echo "Refusing to use '/' as PATCHDIR"
	exit 1
fi

URL="${BASEURL}/releases"

DISTSITE=${URL}/${ARCH}/${ARCH}/${RELEASE}
XORG_CONF_D="${SYSDIR}/usr/local/etc/X11/xorg.conf.d"
FONTSDIR="${SYSDIR}/usr/local/share/fonts"
FONTPATHS_FILE="${XORG_CONF_D}/files.conf"
UZIP_IMAGE="uzip_image"
UZIP_MNT="uzip_mnt"
GPTROOT=nomadroot
TMP_BASE_DIR=tmpbase
TMP_IMAGE_NAME=tmpbase.img
KERNCONF_DIR="${SYSDIR}/usr/src/sys/${ARCH}/conf"
KERNCONF_NOMADBSD="${KERNCONF_DIR}/HARDENEDBSD"
KERNCONF_GENERIC="${KERNCONF_DIR}/GENERIC"

instusrcfg()
{
	(cd nomad  && tar cf - .) | (cd "${SYSDIR}/usr/home/nomad" && tar xf -)
	chroot "${SYSDIR}" sh -c 'chown -R nomad:nomad /usr/home/nomad'
}

initbase()
{
	chroot "${SYSDIR}" sh -c 'mount -t devfs devfs /dev'
	chroot "${SYSDIR}" sh -c '/etc/rc.d/ldconfig start'
	umount "${SYSDIR}/dev"
	if ! grep -q ^nomad "${SYSDIR}/etc/passwd"; then
		chroot "${SYSDIR}" sh -c 'pw useradd nomad -m \
		    -G wheel,operator,video -s /bin/csh'
	fi
	(cd config && tar cf - .) | \
	    (cd "${SYSDIR}" && tar -xf - --uname root --gname wheel)
	chroot "${SYSDIR}" sh -c 'cap_mkdb /etc/login.conf'
	instusrcfg
}

mkfontpaths()
{
	[ ! -d "${XORG_CONF_D}" ] && mkdir -p "${XORG_CONF_D}"

	for i in "${FONTSDIR}"/*; do
		[ ! -d "$i" ] && continue
		mkfontscale "$i/"
		mkfontdir "$i/"
	done
	(echo "Section \"Files\""
	IFS=
	for i in "${FONTSDIR}"/*; do \
		[ ! -d "$i" ] && continue
		n=$(head -1 "$i/fonts.scale")
		r="s#${SYSDIR}(/.*)\$#\\1#"
		i=$(echo $i | sed -E $r)
		if [ $n -gt 0 ]; then \
			echo "  FontPath \"$i\""
		else
			if [ ! -z ${ns} ]; then
				ns=$(printf "${ns}\n$i")
			else
				ns="$i"
			fi
		fi
	done
	echo ${ns} | while read i; do \
		echo "  FontPath \"$i\""
	done
	echo "EndSection") > "${FONTPATHS_FILE}"
}

createbase()
{
	[ ! -d "${SYSDIR}" ] && mkdir "${SYSDIR}"
	BSDINSTALL_DISTDIR="${DISTDIR}" BSDINSTALL_DISTSITE=${DISTSITE} \
		bsdinstall jail "${SYSDIR}"
	BSDINSTALL_DISTDIR="${DISTDIR}" DISTRIBUTIONS="kernel.txz src.txz" \
	BSDINSTALL_DISTSITE=${DISTSITE} bsdinstall distfetch
	BSDINSTALL_DISTDIR="${DISTDIR}" BSDINSTALL_CHROOT="${SYSDIR}" \
	    DISTRIBUTIONS="kernel.txz src.txz" bsdinstall distextract
}

buildnvidia()
{
	[ ! -d "${SYSDIR}/usr/ports" ] && mkdir "${SYSDIR}/usr/ports"
	if ! (mount | grep -q "${SYSDIR}/usr/ports"); then
		mount -t nullfs "${PORTSTREE}" "${SYSDIR}/usr/ports"
	fi
	if ! (mount | grep -q "${SYSDIR}/dev"); then
		chroot "${SYSDIR}" sh -c 'mount -t devfs devfs /dev'
	fi
	[ ! -d "nvidia" ] && mkdir "nvidia" 
	for d in nvidia-driver-304 nvidia-driver-340 nvidia-driver; do
		pkgname=$(cd "${PORTSTREE}/x11/$d" && make -VPKGNAME)
		[ -f nvidia/${pkgname}.txz ] && continue
		chroot "${SYSDIR}" sh -c "cd /usr/ports/x11/$d && \
			make BATCH=1 ${NVIDIA_BUILD_OPTS} clean package" || bail
		cp "${SYSDIR}/usr/ports/x11/$d/work/pkg/${pkgname}.txz" nvidia || bail
		chroot "${SYSDIR}" sh -c "cd /usr/ports/x11/$d && make distclean"
	done
	umount "${SYSDIR}/usr/ports"
	umount "${SYSDIR}/dev"
}

builddrmlegacy()
{
	[ ! -d "${SYSDIR}/usr/ports" ] && mkdir "${SYSDIR}/usr/ports"
	if ! (mount | grep -q "${SYSDIR}/usr/ports"); then
		mount -t nullfs "${PORTSTREE}" "${SYSDIR}/usr/ports"
	fi
	if ! (mount | grep -q "${SYSDIR}/dev"); then
		chroot "${SYSDIR}" sh -c 'mount -t devfs devfs /dev'
	fi
	# Build, and copy the kmods to /boot/drm_legacy
	if [ ! -d "${SYSDIR}/boot/drm_legacy" ]; then
		mkdir "${SYSDIR}/boot/drm_legacy" || bail
	fi
	chroot "${SYSDIR}" \
	    sh -c 'cd /usr/ports/graphics/drm-legacy-kmod && \
			   make clean && make BATCH=1 && \
			   (cd work/stage/boot/modules && tar cf - . | \
			   (cd /boot/drm_legacy && tar xvf -)); \
			   make clean; kldxref /boot/drm_legacy'
	umount "${SYSDIR}/usr/ports"
	umount "${SYSDIR}/dev"
}

instpkgs()
{
	export ASSUME_ALWAYS_YES=yes
	cat ${PKGLIST} | xargs -J% pkg -c "${SYSDIR}" install -y % || bail
	buildnvidia
	mkdir -p "${SYSDIR}/usr/local/nvidia/304" 2>/dev/null
	mkdir -p "${SYSDIR}/usr/local/nvidia/340" 2>/dev/null
	mkdir -p "${SYSDIR}/usr/local/nvidia/390" 2>/dev/null
	for v in 304 340 390; do
		cat nvidia/nvidia-driver-${v}*.txz | \
		    (cd "${SYSDIR}/usr/local/nvidia/${v}" && tar xf -)
	done
}

instgit()
{
	[ ! -d "${SYSDIR}/git" ] && mkdir "${SYSDIR}/git"

	for r in ${GIT_REPOS}; do
		rd=$(echo $r | sed -E 's#.*/(.*)\.git$#\1#')
		repo_dirs="${repo_dirs} ${rd}"
		if [ ! -d "${SYSDIR}/git/${rd}" ]; then
			chroot "${SYSDIR}" sh -c "cd /git && git clone ${r}"
		fi
	done
	for r in ${repo_dirs}; do
		rname=$(echo $r | tr '-' '_')
		eval build_cmd=\${${rname}_BUILD_CMD}
		[ -z "${build_cmd}" ] && continue
		chroot "${SYSDIR}" sh -c "cd /git/${r}; ${build_cmd}"
	done
}

postpkgcfg()
{
	cp "${SYSDIR}/usr/local/etc/dsbmd.conf.sample" \
		"${SYSDIR}/usr/local/etc/dsbmd.conf"
	if grep -q ^cups: "${SYSDIR}/etc/group"; then
		chroot "${SYSDIR}" sh -c 'pw groupmod cups -m root,nomad'
	fi
	# Remove tesserac-data which uses ~1G.
	rm -rf "${SYSDIR}"/usr/local/share/tessdata/*

	# Remove desktop files for LXDE and Xfce preferred applications
	rm -f "${SYSDIR}"/usr/local/share/applications/exo-*.desktop
	rm -f "${SYSDIR}"/usr/local/share/applications/libfm-pref-apps.desktop

	# Remove useless Xfce desktop file
	rm -f "${SYSDIR}"/usr/local/share/applications/xfce4-about.desktop

	# Change default icon of Sakura
	cp "${SYSDIR}"/usr/local/share/icons/Papirus/48x48/apps/utilities-terminal.svg \
	"${SYSDIR}"/usr/local/share/pixmaps/terminal-tango.svg
	(cd config/usr/local/share/slim && tar cf - .) | \
	    (cd "${SYSDIR}"/usr/local/share/slim && tar xf -)
	mkfontpaths
}

instports()
{
	[ ! -d "${SYSDIR}/usr/ports" ] && mkdir "${SYSDIR}/usr/ports"
	if ! (mount | grep -q "${SYSDIR}/usr/ports"); then
		mount -t nullfs "${PORTSTREE}" "${SYSDIR}/usr/ports"
	fi
	if ! (mount | grep -q "${SYSDIR}/dev"); then
		chroot "${SYSDIR}" sh -c 'mount -t devfs devfs /dev'
	fi
	for p in ${PORTSLIST}; do
		echo "Checking whether $p is already installed" >&2
		pkg --chroot "${SYSDIR}" info --exists $p && continue
		echo "Building $p ..." >&2
		pname=$(echo $p | cut -d/ -f2 | tr '-' '_')
		eval popts=\${${pname}_OPTS}
		chroot "${SYSDIR}" sh -c "cd /usr/ports/$p && \
			make BATCH=1 OPTIONS_DEFAULT=\"${popts}\" \
			OPTIONS_UNSET=DOCS clean reinstall" || bail
	done
	umount "${SYSDIR}/usr/ports"
	umount "${SYSDIR}/dev"
}

buildkernel()
{
	local makeopts="KERNCONF=HARDENEDBSD ${BUILDKERNEL_OPTS}"
	local regx="/DEBUG=-g/d; /WITH_CTF=1/d; /^ident.*GENERIC/d;"
	      regx="${regx}/^options.*DDB/d; /^options.*KDB/d;"
	      regx="${regx}/^options.*GDB/d"
	sed -e "${regx}" < ${KERNCONF_GENERIC} > ${KERNCONF_NOMADBSD}
	KERNELOPTS >> ${KERNCONF_NOMADBSD}
	chroot "${SYSDIR}" sh -c "mount -t devfs devfs /dev; \
	    cd /usr/src && make ${makeopts} kernel" || bail
	umount "${SYSDIR}/dev"
}

instsrcdist()
{
		BSDINSTALL_DISTDIR="${DISTDIR}" DISTRIBUTIONS=src.txz \
		    BSDINSTALL_DISTSITE=${DISTSITE} bsdinstall distfetch
		BSDINSTALL_DISTDIR="${DISTDIR}" BSDINSTALL_CHROOT="${SYSDIR}" \
		    DISTRIBUTIONS=src.txz bsdinstall distextract
}

estimgsize() {
	nfiles=$(find "$1" | wc -l)
	wasted=$(($nfiles * (${FRAGSIZE} / 2) / (1024 * 1024)))
	size=$(du -mc -B ${FRAGSIZE} "$1" | tail -1 | cut -f 1)
	size=$((${size} + ${wasted}))
	echo ${size}
}

createtmpimage()
{
	local mddev maxsize

	touch ${TMP_IMAGE_NAME}
	maxsize=$(echo "scale=0; ${MEDIASIZE} * 1000^3 / 1024" | bc)
	mddev=$(mdconfig -a -t vnode -f ${TMP_IMAGE_NAME} -s ${maxsize}k)
	[ $? -ne 0 ] && bail
	gpart destroy -F ${mddev}
	gpart create -s gpt ${mddev} || bail
	gpart add -t freebsd-ufs ${mddev} || bail
	newfs -E -U -O 1 -o time -b ${blksize} -f ${FRAGSIZE} \
	    -m ${UFS_MINFREE} /dev/${mddev}p1 || bail
	mdconfig -d -u ${mddev}
}

createimage()
{
	local tmpimgdev used

	[ ! -z ${mac} ] && IMAGE_NAME=${IMAGE_NAME%.img}.mac.img
	if [ -f ${IMAGE_NAME} ]; then
		echo "${IMAGE_NAME} already exists" >&2
		bail
	fi
	if [ ! -f ${UZIP_IMAGE}.uzip ]; then
		echo "${UZIP_IMAGE}.uzip does not exist." >&2
		bail
	fi
	blksize=$((${FRAGSIZE} * 8))
	uzipsz=$(du -m ${UZIP_IMAGE}.uzip | cut -f1)

	if [ -d ${TMP_BASE_DIR} ]; then
		echo "${TMP_BASE_DIR} already exists." >&2
		bail
	fi
	mkdir ${TMP_BASE_DIR}

	createtmpimage
	tmpimgdev=$(mdconfig -a -t vnode -f ${TMP_IMAGE_NAME})
	[ $? -ne 0 ] && bail
	mount /dev/${tmpimgdev}p1 ${TMP_BASE_DIR} || bail

	(cd "${SYSDIR}" && rm -rf var/tmp/*; rm -rf tmp/*)
	(cd "${SYSDIR}" && tar -cf -         \
	    --exclude '^boot/kernel.old'   \
	    --exclude '^git*'              \
	    --exclude '^pkgs/*'            \
	    --exclude '^usr/obj*'          \
	    --exclude '^usr/src*'          \
	    --exclude '^usr/ports*'        \
	    --exclude '^usr/*/doc/*'       \
	    --exclude '^usr/local'         \
	    --exclude '^home*'             \
	    --exclude '^usr/home*'         \
	    --exclude '^var/cache/pkg*'    \
	    --exclude '^var/db/portsnap/*' \
	    --exclude '^var/db/ports/*'    \
	    --exclude '^var/log/*' .) | (cd ${TMP_BASE_DIR} && tar pxf -) || bail
	mkdir ${TMP_BASE_DIR}/var/log
	(cd "${SYSDIR}/usr/home/nomad" && tar cfz - .) > \
		${TMP_BASE_DIR}/home.nomad.tgz
	mkdir ${TMP_BASE_DIR}/usr.local.etc
	(cd "${SYSDIR}/usr/local/etc" && tar cf - .) | \
 	    (cd ${TMP_BASE_DIR}/usr.local.etc && tar vpxf -) || bail
	(cd ${TMP_BASE_DIR} && tar cfJ nomadbsd-backup.tar.xz \
		etc root var usr.local.etc)
	mkdir ${TMP_BASE_DIR}/uzip; mkdir ${TMP_BASE_DIR}/usr/local
	cp ${UZIP_IMAGE}.uzip ${TMP_BASE_DIR}/uzip/usr.local.uzip || bail

	if [ ! -z ${mac} ]; then
		echo wsp_load=\"YES\" >> ${TMP_BASE_DIR}/boot/loader.conf
		sed -i -E '/.*lenovofix.*$/d' \
			${TMP_BASE_DIR}/usr/libexec/nomad/nomad_setup
	fi
	used=$(df -m /dev/${tmpimgdev}p1 | tail -1 | awk -F" " '{print $3}')
	basesz=$((100 * (${BASEFS_EXTRA} + ${used}) / (100 - (${UFS_MINFREE} + ${UFS_OVERHEAD}))))
	touch ${IMAGE_NAME}
	maxsize=$(echo "scale=0; ${MEDIASIZE} * 1000^3 / 1024" | bc)
	mddev=$(mdconfig -a -t vnode -f ${IMAGE_NAME} -s ${maxsize}k)
	[ $? -ne 0 ] && bail
	[ ! -d mnt ] && mkdir mnt
	gpart destroy -F ${mddev}
	gpart create -s gpt ${mddev} || bail
	gpart add -t freebsd-boot -l gpboot -b 40 -s 512K ${mddev} || bail
	gpart bootcode -b /boot/pmbr -p /boot/gptboot -i 1 ${mddev} || bail
	if [ ! -z ${mac} ]; then
		gpart add -t efi -l gpefiboot -s 200M ${mddev} || bail
	else
		gpart add -t efi -l gpefiboot -s 800K ${mddev} || bail
		gpart set -a lenovofix ${mddev} || bail
	fi
	dd if="${SYSDIR}"/boot/boot1.efifat of=/dev/${mddev}p2 || bail
	gpart add -t freebsd-ufs -l ${GPTROOT} -s ${basesz}M ${mddev} || bail
	newfs -E -U -O 1 -o time -b ${blksize} -f ${FRAGSIZE} \
	    -m ${UFS_MINFREE} /dev/${mddev}p3 || bail
	mount /dev/${mddev}p3 mnt || bail
	(cd ${TMP_BASE_DIR} && tar cf - .) | (cd mnt && tar pxf -) || bail
	umount mnt || umount -f mnt
	mdconfig -d -u ${mddev}
	rmdir mnt
	chflags -R noschg,nosunlnk ${TMP_BASE_DIR}
	umount ${TMP_BASE_DIR} || bail
	mdconfig -d -u ${tmpimgdev}
	rm -f ${TMP_IMAGE_NAME}
	rm -rf ${TMP_BASE_DIR}
}

createuzip()
{
	if [ -f ${UZIP_IMAGE}.uzip ]; then
		echo "${UZIP_IMAGE}.uzip already exists" >&2
		bail
	fi
	if [ -f ${UZIP_IMAGE}.img ]; then
		echo "${UZIP_IMAGE}.img already exists" >&2
		bail
	fi
	blksize=$((${FRAGSIZE} * 8))
	uzipsz=$(estimgsize "${SYSDIR}/usr/local")

	touch ${UZIP_IMAGE}.img
	mddev=$(mdconfig -a -t vnode -f ${UZIP_IMAGE}.img -s ${uzipsz}m) || bail
	newfs -O 1 -o space -m 0 -b ${blksize} -f ${FRAGSIZE} \
	    /dev/${mddev} || bail
	[ ! -d "${UZIP_MNT}" ] && mkdir "${UZIP_MNT}"
	mount /dev/${mddev} "${UZIP_MNT}" || bail
	(cd "${SYSDIR}/usr/local" && tar -cf -	\
	    --exclude '^etc' .) | (cd "${UZIP_MNT}" && tar pxf -) || bail
	(cd "${UZIP_MNT}" && ln -s /usr.local.etc etc)
	[ ! -d pkgcache ] && mkdir pkgcache
	umount "${UZIP_MNT}" || umount -f "${UZIP_MNT}"
	mdconfig -d -u ${mddev}
	rmdir "${UZIP_MNT}"
	mkuzip -Z -j 2 -d -s 19456 -o ${UZIP_IMAGE}.uzip ${UZIP_IMAGE}.img
}

createpatch()
{
	[ ! -d "${PATCHDIR}" ] && mkdir "${PATCHDIR}"
	if [ -z "${PATCHVERSION}" ]; then
		echo "PATCHVERSION not defined" >&2
		bail
	fi
	(cd config && tar cf - .) | (cd "${PATCHDIR}" && tar xf -)
	echo "${PATCHVERSION}" > "${PATCHDIR}/VERSION"
	mkdir "${PATCHDIR}/home"
	(tar cf - nomad) | (cd "${PATCHDIR}/home" && tar xf -)
	(cd "${PATCHDIR}" && find . -type f -exec md5 {} \; > \
	    "$(pwd)/nomadbsd-patch-${PATCHVERSION}.files")
	(cd "${PATCHDIR}" && \
	    tar cfz "$(pwd)/nomadbsd-patch-${PATCHVERSION}.tgz" .)
	cs=$(sha256 nomadbsd-patch-${PATCHVERSION}.tgz | \
	    cut -d'=' -f2 | tr -d ' ')
	r="version=${PATCHVERSION}"
	r="${r}:archive=nomadbsd-patch-${PATCHVERSION}.tgz"
	r="${r}:archivecs=${cs}"
	r="${r}:flist=nomadbsd-patch-${PATCHVERSION}.files"
	echo ${r} >> nomadbsd-patch.index
}

cleanup()
{
	if (mount | grep "${SYSDIR}/usr/ports"); then
		umount "${SYSDIR}/usr/ports" || umount -f "${SYSDIR}/usr/ports"
	fi
	if (mount | grep "${SYSDIR}/dev"); then
		umount "${SYSDIR}/dev" || umount -f "${SYSDIR}/dev"
	fi
	if (mount | grep "${UZIP_MNT}"); then
		umount "${UZIP_MNT}" || umount -f "${UZIP_MNT}"
	fi
	if (mount | grep "${PWD}/mnt" || mount | grep './mnt'); then
		umount ./mnt || umount -f ./mnt
	fi
	if (mount | grep "${PWD}/${TMP_BASE_DIR}" || \
	    mount | grep './${TMP_BASE_DIR}'); then
		umount ./${TMP_BASE_DIR} || umount -f ./${TMP_BASE_DIR}
	fi
	rmdir "${UZIP_MNT}" ./mnt ./${TMP_BASE_DIR} 2>/dev/null
	for i in $(mdconfig -l); do
		mdconfig -d -u $i
	done
	rm -f ./${TMP_BASE_DIR}.img 2>/dev/null
}

bail()
{
	cleanup
	exit 1
}

usrclean()
{
	rm -rf "${SYSDIR}/home/nomad/"*
	rm -rf "${SYSDIR}/home/nomad/".* 2>/dev/null
}

baseclean()
{
	chflags -R noschg,nosunlnk "${SYSDIR}"
	rm -rf "${SYSDIR}"
}

allclean()
{
	baseclean
	rm -rf ./"${PATCHDIR}"
	rm -rf "${DISTDIR}"
	rm -f ${UZIP_IMAGE}.img ${UZIP_IMAGE}.uzip
	rm -rf nvidia
}

_init()
{
	createbase
	initbase
}

all()
{
	local i stages

	stages="instpkgs instgit instports builddrmlegacy postpkgcfg"
	stages="${stages} createuzip createimage cleanup"

	_init
	if [ ! -z "${BUILD_KERNEL}" ]; then
		case ${BUILD_KERNEL} in
		[yY][eE][sS])
			echo buildkernel > ".failed-stage"
			buildkernel
			;;
		esac
	fi
	for i in ${stages}; do
		echo $i > ".failed-stage"
		$i
	done
	rm -f ".failed-stage"
}

resumebuild()
{
	local i stages stage_found failed_stage
	stages="buildkernel instpkgs instgit instports"
	stages="${stages} builddrmlegacy postpkgcfg"
	stages="${stages} createuzip createimage cleanup"

	stage_found=0
	failed_stage=$(cat .failed-stage)
	if [ -z "${failed_stage}" ]; then
		echo "There is nothing to continue" >&2
		exit 1
	fi
	for i in ${stages}; do
		if  [ ${stage_found} -eq 1 ]; then
			echo $i > ".failed-stage"
			$i
		elif [ "${failed_stage}" = $i ]; then
			stage_found=1
			$i
		fi
	done
	rm -f ".failed-stage"
}

usage()
{
	echo "Usage: build cmd ..."
	echo "       build -h"
	exit 1
}

help()
{
	less build.hlp
	exit 0
}

[ $# -lt 1 ] && usage

trap bail SIGINT SIGTERM SIGHUP

while [ $# -gt 0 ]; do
	case "$1" in
	-m)	  	  mac=1;;
	-h)		  help;;
	all)	  all;;
	clean)	  allclean;;
	cleanup)  cleanup;;
	git)	  instgit;;
	image)	  createimage;;
	init)	  init;;
	initbase) initbase;;
	kernel)	  buildkernel;;
	patch)	  createpatch;;
	pkgcfg)	  postpkgcfg;;
	pkgs)	  instpkgs;;
	ports)	  instports;;
	resume)	  resumebuild;;
	src)	  instsrcdist;;
	uzip)	  createuzip;;
	usrcfg)	  instusrcfg;;
	usrclean) usrclean;;
	*)		  usage;;
	esac
	shift
done

